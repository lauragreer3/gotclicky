{"version":3,"sources":["logo.svg","clickyBoard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","shuffleArray","array","i","length","j","Math","floor","random","_ref","CharacterButton","props","_this","this","characterClasses","name","react_default","a","createElement","role","key","id","onClick","e","clickHandler","aria-label","className","join","Scoreboard","score","Gamestate","game_state","Gameboard","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","game_characters","character_selected","character_order","handleCharacterClick","bind","assertThisInitialized","character_id","console","log","oldScore","parseInt","oldOrder","oldSelected","includes","setState","push","_this3","map","Component","App","href","clickyBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37dbf875.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nfunction shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction CharacterButton(props) {\r\n    const characterClasses = [props.name, 'click-item', 'col-md-3', 'col-lg-2'];\r\n    return (\r\n        <div role=\"img\" key={props.id} onClick={(e) => props.clickHandler(this, props.id)} aria-label=\"click item\" className={characterClasses.join(' ')} />\r\n    );\r\n}\r\n\r\nfunction Scoreboard(props) {\r\n    return (\r\n        <div className=\"scoreLabel nav-link\">\r\n            Score: <span className=\"score\" id=\"score\">{props.score}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Gamestate(props) {\r\n    return (\r\n        <div className=\"gamestateLabel\">\r\n            {props.game_state}\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Gameboard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            game_characters: [\r\n                { id:1, name: 'blackpanther' },\r\n                { id:2, name: 'shuri' },\r\n                { id:3, name: 'captain-america' },\r\n                { id:4, name: 'gamora' },\r\n                { id:5, name: 'hulk' },\r\n                { id:6, name: 'ironman' },\r\n                { id:7, name: 'ironmonger' },\r\n                { id:8, name: 'loki' },\r\n                { id:9, name: 'mandarin' },\r\n                { id:10, name: 'blackwidow' },\r\n                { id:11, name: 'thanos' },\r\n                { id:12, name: 'thor' }\r\n            ],\r\n            character_selected: [],\r\n            character_order:[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\r\n            game_state: 'Click an MCU Character',\r\n            score: 0\r\n        };\r\n        this.handleCharacterClick = this.handleCharacterClick.bind(this);\r\n    }\r\n\r\n    handleCharacterClick(e, character_id) {\r\n        console.log('character click' + character_id);\r\n        console.log('score: ' + this.state.score);\r\n        var oldScore = parseInt(this.state.score);\r\n        var oldOrder = this.state.character_order;\r\n        var oldSelected = this.state.character_selected;\r\n        if(oldSelected.includes(character_id)) {\r\n            //already selected, handle gameover\r\n            this.setState({\r\n                game_state: 'Game Over', \r\n                score: 0,\r\n                character_order: shuffleArray(oldOrder),\r\n                character_selected: []\r\n            });\r\n            console.log('game over');\r\n        }\r\n        else\r\n        {\r\n            // this.state.character_selected.push(character_id);\r\n            console.log(this.state.character_selected);\r\n            oldSelected.push(character_id);\r\n            //check for win\r\n            if(oldScore + 1 === 12)\r\n            {\r\n                this.setState({\r\n                    score: 0,\r\n                    character_order: shuffleArray(oldOrder),\r\n                    character_selected: [],\r\n                    game_state: 'Winner Winner, chicken dinner!'\r\n                })\r\n            }\r\n            else\r\n            {\r\n                this.setState({\r\n                    score: oldScore + 1,\r\n                    character_order: shuffleArray(oldOrder),\r\n                    character_selected: oldSelected,\r\n                    game_state: 'Select a character that has not been selected yet '\r\n                });\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"gameboard\">\r\n                <Scoreboard score={parseInt(this.state.score)}/>\r\n                <Gamestate game_state={this.state.game_state} />\r\n                <div id=\"game_pictures\" className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                    {this.state.character_order.map((id) => \r\n                        <CharacterButton\r\n                            key={id} \r\n                            name={this.state.game_characters[id-1].name}\r\n                            id={this.state.game_characters[id-1].id}\r\n                            clickHandler={this.handleCharacterClick}\r\n                        />        \r\n                    )}\r\n                </div>  \r\n            </div>  \r\n        </div>\r\n        );\r\n    }\r\n}\r\n        \r\n\r\nexport default Gameboard;\r\n\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './clickyBoard.js';\nimport Gameboard from './clickyBoard';\n\nfunction App() {\n  return (\n    <div className=\"App d-flex w-100 h-100 p-3 mx-auto flex-column\">\n      <header className=\"App-header masthead mb-auto\">\n        <div className=\"inner\">\n          <nav className=\"nav nav-masthead justify-content-center\">\n            <a className=\"nav-link active\" href=\"#\">Home</a>\n            \n          </nav>\n        </div>\n      </header>\n      <main className=\"inner cover\" role=\"main\">\n        <h1 className=\"cover-heading\">Marvel Clicky Game</h1>\n        <p className=\"lead\">Click a picture below to begin. Keep clicking characters without clicking same picture twice to build your score.</p>\n        \n        <Gameboard />\n\n\n      </main>\n\n      <footer className=\"mastfood mt-auto\">\n        <div className=\"inner\">\n          <p className=\"footer-text\"><a href=\"https://github.com/lauragreer3/gotclicky\" className=\"gitlink\">Marvel Clicky Game repository</a></p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}